/**
 * API dos Correios
 * API de rastreios de Objetos Postais
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CalculoPrecoFrete', 'model/Erro'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CalculoPrecoFrete'), require('../model/Erro'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDosCorreios) {
      root.ApiDosCorreios = {};
    }
    root.ApiDosCorreios.PreosApi = factory(root.ApiDosCorreios.ApiClient, root.ApiDosCorreios.CalculoPrecoFrete, root.ApiDosCorreios.Erro);
  }
}(this, function(ApiClient, CalculoPrecoFrete, Erro) {
  'use strict';

  /**
   * Preos service.
   * @module api/PreosApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PreosApi. 
   * @alias module:api/PreosApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the precosGet operation.
     * @callback module:api/PreosApi~precosGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CalculoPrecoFrete>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cálculo de Preços por CEP de origem, CEP de destino e tipo de entrega.
     * @param {String} clientId Identificaçáo do cliente usado na autenticaçáo.
     * @param {String} accessToken Access token usado na autenticaçáo.
     * @param {String} codigoServico Pode conter mais de um código por consulta separados por virgula. 40010 - SEDEX Varejo, 40045 - SEDEX a Cobrar Varejo, 40215 - SEDEX 10 Varejo, 40290 - SEDEX Hoje Varejo, 41106 - PAC Varejo
     * @param {String} cepOrigem CEP de Origem sem hífen.Exemplo: 05311900
     * @param {String} cepDestino CEP de Destino sem hífen
     * @param {Number} peso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg
     * @param {Number} formato Formato da encomenda (incluindo embalagem). 1 - Formato caixa/pacote, 2 - Formato rolo/prisma, 3 - Envelope
     * @param {Number} comprimento Comprimento da encomenda (incluindo embalagem), em centímetros.
     * @param {Number} altura Altura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0).
     * @param {Number} largura Largura da encomenda (incluindo embalagem), em centímetros.
     * @param {Number} diametro Diâmetro da encomenda (incluindo embalagem), em centímetros.
     * @param {Object} opts Optional parameters
     * @param {String} opts.servicoMaoPropria Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S - Sim, N - Não) (default to N)
     * @param {Number} opts.valorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais.
     * @param {String} opts.avisoRecebimento Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S - Sim, N - Não) (default to N)
     * @param {String} opts.codigoEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios.
     * @param {String} opts.senhaEmpresa Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato.
     * @param {module:api/PreosApi~precosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CalculoPrecoFrete>}
     */
    this.precosGet = function(clientId, accessToken, codigoServico, cepOrigem, cepDestino, peso, formato, comprimento, altura, largura, diametro, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling precosGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling precosGet");
      }

      // verify the required parameter 'codigoServico' is set
      if (codigoServico === undefined || codigoServico === null) {
        throw new Error("Missing the required parameter 'codigoServico' when calling precosGet");
      }

      // verify the required parameter 'cepOrigem' is set
      if (cepOrigem === undefined || cepOrigem === null) {
        throw new Error("Missing the required parameter 'cepOrigem' when calling precosGet");
      }

      // verify the required parameter 'cepDestino' is set
      if (cepDestino === undefined || cepDestino === null) {
        throw new Error("Missing the required parameter 'cepDestino' when calling precosGet");
      }

      // verify the required parameter 'peso' is set
      if (peso === undefined || peso === null) {
        throw new Error("Missing the required parameter 'peso' when calling precosGet");
      }

      // verify the required parameter 'formato' is set
      if (formato === undefined || formato === null) {
        throw new Error("Missing the required parameter 'formato' when calling precosGet");
      }

      // verify the required parameter 'comprimento' is set
      if (comprimento === undefined || comprimento === null) {
        throw new Error("Missing the required parameter 'comprimento' when calling precosGet");
      }

      // verify the required parameter 'altura' is set
      if (altura === undefined || altura === null) {
        throw new Error("Missing the required parameter 'altura' when calling precosGet");
      }

      // verify the required parameter 'largura' is set
      if (largura === undefined || largura === null) {
        throw new Error("Missing the required parameter 'largura' when calling precosGet");
      }

      // verify the required parameter 'diametro' is set
      if (diametro === undefined || diametro === null) {
        throw new Error("Missing the required parameter 'diametro' when calling precosGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'codigoServico': codigoServico,
        'cepOrigem': cepOrigem,
        'cepDestino': cepDestino,
        'peso': peso,
        'formato': formato,
        'comprimento': comprimento,
        'altura': altura,
        'largura': largura,
        'diametro': diametro,
        'servicoMaoPropria': opts['servicoMaoPropria'],
        'valorDeclarado': opts['valorDeclarado'],
        'avisoRecebimento': opts['avisoRecebimento'],
        'codigoEmpresa': opts['codigoEmpresa'],
        'senhaEmpresa': opts['senhaEmpresa']
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [CalculoPrecoFrete];

      return this.apiClient.callApi(
        '/precos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
