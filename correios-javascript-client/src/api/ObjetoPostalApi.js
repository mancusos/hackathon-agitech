/**
 * API dos Correios
 * API de rastreios de Objetos Postais
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DetalhesEventos', 'model/Erro', 'model/Eventos', 'model/ObjetoPostal'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DetalhesEventos'), require('../model/Erro'), require('../model/Eventos'), require('../model/ObjetoPostal'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDosCorreios) {
      root.ApiDosCorreios = {};
    }
    root.ApiDosCorreios.ObjetoPostalApi = factory(root.ApiDosCorreios.ApiClient, root.ApiDosCorreios.DetalhesEventos, root.ApiDosCorreios.Erro, root.ApiDosCorreios.Eventos, root.ApiDosCorreios.ObjetoPostal);
  }
}(this, function(ApiClient, DetalhesEventos, Erro, Eventos, ObjetoPostal) {
  'use strict';

  /**
   * ObjetoPostal service.
   * @module api/ObjetoPostalApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ObjetoPostalApi. 
   * @alias module:api/ObjetoPostalApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the eventosTipoEventoGet operation.
     * @callback module:api/ObjetoPostalApi~eventosTipoEventoGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DetalhesEventos>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retorna uma lista de possiveis status para um determinado evento.
     * @param {String} clientId Identificaçáo do cliente usado na autenticaçáo.
     * @param {String} accessToken Access token usado na autenticaçáo.
     * @param {String} tipoEvento Tipo de evento a ser pesquisado.
     * @param {Object} opts Optional parameters
     * @param {String} opts.statusEvento Status a ser filtrado.
     * @param {module:api/ObjetoPostalApi~eventosTipoEventoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DetalhesEventos>}
     */
    this.eventosTipoEventoGet = function(clientId, accessToken, tipoEvento, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling eventosTipoEventoGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling eventosTipoEventoGet");
      }

      // verify the required parameter 'tipoEvento' is set
      if (tipoEvento === undefined || tipoEvento === null) {
        throw new Error("Missing the required parameter 'tipoEvento' when calling eventosTipoEventoGet");
      }


      var pathParams = {
        'tipoEvento': tipoEvento
      };
      var queryParams = {
        'statusEvento': opts['statusEvento']
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [DetalhesEventos];

      return this.apiClient.callApi(
        '/eventos/{tipoEvento}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the objetosCodigoObjetoGet operation.
     * @callback module:api/ObjetoPostalApi~objetosCodigoObjetoGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Eventos>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pesquisa por informações relacionadas a um objeto postal especifico.
     * @param {String} clientId Identificaçáo do cliente usado na autenticaçáo.
     * @param {String} accessToken Access token usado na autenticaçáo.
     * @param {String} codigoObjeto Codigo do objeto a ser pesquisado.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tipoEvento Tipo de evento a ser filtrado.
     * @param {module:api/ObjetoPostalApi~objetosCodigoObjetoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Eventos>}
     */
    this.objetosCodigoObjetoGet = function(clientId, accessToken, codigoObjeto, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling objetosCodigoObjetoGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling objetosCodigoObjetoGet");
      }

      // verify the required parameter 'codigoObjeto' is set
      if (codigoObjeto === undefined || codigoObjeto === null) {
        throw new Error("Missing the required parameter 'codigoObjeto' when calling objetosCodigoObjetoGet");
      }


      var pathParams = {
        'codigoObjeto': codigoObjeto
      };
      var queryParams = {
        'tipoEvento': opts['tipoEvento']
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Eventos];

      return this.apiClient.callApi(
        '/objetos/{codigoObjeto}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the objetosGet operation.
     * @callback module:api/ObjetoPostalApi~objetosGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ObjetoPostal>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pesquisa por informações relacionados a uma lista de objetos postais.
     * @param {String} clientId Identificaçáo do cliente usado na autenticaçáo.
     * @param {String} accessToken Access token usado na autenticaçáo.
     * @param {String} codigoObjeto Lista, separada por virgula, com codigos de objetos postais.
     * @param {module:api/ObjetoPostalApi~objetosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ObjetoPostal>}
     */
    this.objetosGet = function(clientId, accessToken, codigoObjeto, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling objetosGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling objetosGet");
      }

      // verify the required parameter 'codigoObjeto' is set
      if (codigoObjeto === undefined || codigoObjeto === null) {
        throw new Error("Missing the required parameter 'codigoObjeto' when calling objetosGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'codigoObjeto': codigoObjeto
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [ObjetoPostal];

      return this.apiClient.callApi(
        '/objetos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
