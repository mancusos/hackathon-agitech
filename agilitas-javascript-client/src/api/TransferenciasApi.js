/**
 * API Agillitas Cartões Pré-pagos
 * API para manipular recursos relacionadas aos  cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MsgErro', 'model/Transferencia', 'model/TransferenciaCadastroBenificiario'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/MsgErro'), require('../model/Transferencia'), require('../model/TransferenciaCadastroBenificiario'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiAgillitasCartesPrPagos) {
      root.ApiAgillitasCartesPrPagos = {};
    }
    root.ApiAgillitasCartesPrPagos.TransferenciasApi = factory(root.ApiAgillitasCartesPrPagos.ApiClient, root.ApiAgillitasCartesPrPagos.MsgErro, root.ApiAgillitasCartesPrPagos.Transferencia, root.ApiAgillitasCartesPrPagos.TransferenciaCadastroBenificiario);
  }
}(this, function(ApiClient, MsgErro, Transferencia, TransferenciaCadastroBenificiario) {
  'use strict';

  /**
   * Transferencias service.
   * @module api/TransferenciasApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TransferenciasApi. 
   * @alias module:api/TransferenciasApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the transferenciasCadastrosPost operation.
     * @callback module:api/TransferenciasApi~transferenciasCadastrosPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cadastro de beneficiário para Transferencia
     * &lt;p&gt;Permite o cadastro de beneficiário para uma transferencia.&lt;/p&gt;
     * @param {String} clientId Identificador do cliente utilizado na autenticação.
     * @param {String} accessToken Token de acesso utilizado na autenticação.
     * @param {module:model/TransferenciaCadastroBenificiario} beneficiario Objeto de requisição
     * @param {module:api/TransferenciasApi~transferenciasCadastrosPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transferenciasCadastrosPost = function(clientId, accessToken, beneficiario, callback) {
      var postBody = beneficiario;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling transferenciasCadastrosPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling transferenciasCadastrosPost");
      }

      // verify the required parameter 'beneficiario' is set
      if (beneficiario === undefined || beneficiario === null) {
        throw new Error("Missing the required parameter 'beneficiario' when calling transferenciasCadastrosPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transferencias/cadastros', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transferenciasPost operation.
     * @callback module:api/TransferenciasApi~transferenciasPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transferência de valores entre contas
     * &lt;p&gt;Permite a transferência de valor entre dois cartões pré cadastrados.&lt;/p&gt;
     * @param {String} clientId Identificador do cliente utilizado na autenticação.
     * @param {String} accessToken Token de acesso utilizado na autenticação.
     * @param {module:model/Transferencia} transferencia Objeto de requisição
     * @param {module:api/TransferenciasApi~transferenciasPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transferenciasPost = function(clientId, accessToken, transferencia, callback) {
      var postBody = transferencia;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling transferenciasPost");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling transferenciasPost");
      }

      // verify the required parameter 'transferencia' is set
      if (transferencia === undefined || transferencia === null) {
        throw new Error("Missing the required parameter 'transferencia' when calling transferenciasPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transferencias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
