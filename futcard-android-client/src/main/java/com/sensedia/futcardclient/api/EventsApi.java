/**
 * API do Futebolcard
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.sensedia.futcardclient.api;

import com.sensedia.futcardclient.ApiException;
import com.sensedia.futcardclient.ApiInvoker;
import com.sensedia.futcardclient.Pair;
import com.sensedia.futcardclient.model.Events;
import com.sensedia.futcardclient.model.Row;
import com.sensedia.futcardclient.model.Sectors;
import com.sensedia.futcardclient.model.SubSectors;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class EventsApi {
  String basePath = "https://api-visa.sensedia.com/sandbox/visa/futebolcard/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Returns the details for a specific occurring event.
   * @param clientId Customer identifier used for authentication.
   * @param accessToken Access token used in the authentication.
   * @param eventId Event to search.
   * @return Events
  */
  public Events getEvent (String clientId, String accessToken, String eventId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'clientId' is set
      if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getEvent",
      new ApiException(400, "Missing the required parameter 'clientId' when calling getEvent"));
      }
  
      // verify the required parameter 'accessToken' is set
      if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getEvent",
      new ApiException(400, "Missing the required parameter 'accessToken' when calling getEvent"));
      }
  
      // verify the required parameter 'eventId' is set
      if (eventId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getEvent",
      new ApiException(400, "Missing the required parameter 'eventId' when calling getEvent"));
      }
  

  // create path and map variables
  String path = "/events/{eventId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
          headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Events) ApiInvoker.deserialize(localVarResponse, "", Events.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Returns the details for a specific occurring event.
   * @param clientId Customer identifier used for authentication.   * @param accessToken Access token used in the authentication.   * @param eventId Event to search.
  */
  private void getEvent (String clientId, String accessToken, String eventId, final Response.Listener<Events> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getEvent",
         new ApiException(400, "Missing the required parameter 'clientId' when calling getEvent"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getEvent",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling getEvent"));
    }
    
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getEvent",
         new ApiException(400, "Missing the required parameter 'eventId' when calling getEvent"));
    }
    

    // create path and map variables
    String path = "/events/{eventId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Events) ApiInvoker.deserialize(localVarResponse,  "", Events.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Returns a list of sector for the given event.
   * @param clientId Customer identifier used for authentication.
   * @param accessToken Access token used in the authentication.
   * @param eventId Event to search.
   * @return Sectors
  */
  public Sectors getSectorsOfEvent (String clientId, String accessToken, String eventId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'clientId' is set
      if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSectorsOfEvent",
      new ApiException(400, "Missing the required parameter 'clientId' when calling getSectorsOfEvent"));
      }
  
      // verify the required parameter 'accessToken' is set
      if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSectorsOfEvent",
      new ApiException(400, "Missing the required parameter 'accessToken' when calling getSectorsOfEvent"));
      }
  
      // verify the required parameter 'eventId' is set
      if (eventId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSectorsOfEvent",
      new ApiException(400, "Missing the required parameter 'eventId' when calling getSectorsOfEvent"));
      }
  

  // create path and map variables
  String path = "/events/{eventId}/sectors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
          headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Sectors) ApiInvoker.deserialize(localVarResponse, "", Sectors.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Returns a list of sector for the given event.
   * @param clientId Customer identifier used for authentication.   * @param accessToken Access token used in the authentication.   * @param eventId Event to search.
  */
  private void getSectorsOfEvent (String clientId, String accessToken, String eventId, final Response.Listener<Sectors> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSectorsOfEvent",
         new ApiException(400, "Missing the required parameter 'clientId' when calling getSectorsOfEvent"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSectorsOfEvent",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling getSectorsOfEvent"));
    }
    
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSectorsOfEvent",
         new ApiException(400, "Missing the required parameter 'eventId' when calling getSectorsOfEvent"));
    }
    

    // create path and map variables
    String path = "/events/{eventId}/sectors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Sectors) ApiInvoker.deserialize(localVarResponse,  "", Sectors.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Returns the details of a specific sector.
   * @param clientId Customer identifier used for authentication.
   * @param accessToken Access token used in the authentication.
   * @param eventId Event to search.
   * @param sectorId Sector to search.
   * @return SubSectors
  */
  public SubSectors getSector (String clientId, String accessToken, String eventId, String sectorId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'clientId' is set
      if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSector",
      new ApiException(400, "Missing the required parameter 'clientId' when calling getSector"));
      }
  
      // verify the required parameter 'accessToken' is set
      if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSector",
      new ApiException(400, "Missing the required parameter 'accessToken' when calling getSector"));
      }
  
      // verify the required parameter 'eventId' is set
      if (eventId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSector",
      new ApiException(400, "Missing the required parameter 'eventId' when calling getSector"));
      }
  
      // verify the required parameter 'sectorId' is set
      if (sectorId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectorId' when calling getSector",
      new ApiException(400, "Missing the required parameter 'sectorId' when calling getSector"));
      }
  

  // create path and map variables
  String path = "/events/{eventId}/sectors/{sectorId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString())).replaceAll("\\{" + "sectorId" + "\\}", apiInvoker.escapeString(sectorId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
          headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SubSectors) ApiInvoker.deserialize(localVarResponse, "", SubSectors.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Returns the details of a specific sector.
   * @param clientId Customer identifier used for authentication.   * @param accessToken Access token used in the authentication.   * @param eventId Event to search.   * @param sectorId Sector to search.
  */
  private void getSector (String clientId, String accessToken, String eventId, String sectorId, final Response.Listener<SubSectors> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSector",
         new ApiException(400, "Missing the required parameter 'clientId' when calling getSector"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSector",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling getSector"));
    }
    
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSector",
         new ApiException(400, "Missing the required parameter 'eventId' when calling getSector"));
    }
    
    // verify the required parameter 'sectorId' is set
    if (sectorId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'sectorId' when calling getSector",
         new ApiException(400, "Missing the required parameter 'sectorId' when calling getSector"));
    }
    

    // create path and map variables
    String path = "/events/{eventId}/sectors/{sectorId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString())).replaceAll("\\{" + "sectorId" + "\\}", apiInvoker.escapeString(sectorId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SubSectors) ApiInvoker.deserialize(localVarResponse,  "", SubSectors.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Returns a list of subcsectors for a given sector.
   * @param clientId Customer identifier used for authentication.
   * @param accessToken Access token used in the authentication.
   * @param eventId Event to search.
   * @param sectorId Sector to search.
   * @return SubSectors
  */
  public SubSectors getSubcsectors (String clientId, String accessToken, String eventId, String sectorId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'clientId' is set
      if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSubcsectors",
      new ApiException(400, "Missing the required parameter 'clientId' when calling getSubcsectors"));
      }
  
      // verify the required parameter 'accessToken' is set
      if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSubcsectors",
      new ApiException(400, "Missing the required parameter 'accessToken' when calling getSubcsectors"));
      }
  
      // verify the required parameter 'eventId' is set
      if (eventId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSubcsectors",
      new ApiException(400, "Missing the required parameter 'eventId' when calling getSubcsectors"));
      }
  
      // verify the required parameter 'sectorId' is set
      if (sectorId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectorId' when calling getSubcsectors",
      new ApiException(400, "Missing the required parameter 'sectorId' when calling getSubcsectors"));
      }
  

  // create path and map variables
  String path = "/events/{eventId}/sectors/{sectorId}/subsectors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString())).replaceAll("\\{" + "sectorId" + "\\}", apiInvoker.escapeString(sectorId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
          headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SubSectors) ApiInvoker.deserialize(localVarResponse, "", SubSectors.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Returns a list of subcsectors for a given sector.
   * @param clientId Customer identifier used for authentication.   * @param accessToken Access token used in the authentication.   * @param eventId Event to search.   * @param sectorId Sector to search.
  */
  private void getSubcsectors (String clientId, String accessToken, String eventId, String sectorId, final Response.Listener<SubSectors> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSubcsectors",
         new ApiException(400, "Missing the required parameter 'clientId' when calling getSubcsectors"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSubcsectors",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling getSubcsectors"));
    }
    
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSubcsectors",
         new ApiException(400, "Missing the required parameter 'eventId' when calling getSubcsectors"));
    }
    
    // verify the required parameter 'sectorId' is set
    if (sectorId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'sectorId' when calling getSubcsectors",
         new ApiException(400, "Missing the required parameter 'sectorId' when calling getSubcsectors"));
    }
    

    // create path and map variables
    String path = "/events/{eventId}/sectors/{sectorId}/subsectors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString())).replaceAll("\\{" + "sectorId" + "\\}", apiInvoker.escapeString(sectorId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SubSectors) ApiInvoker.deserialize(localVarResponse,  "", SubSectors.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Returns a list of seat&#39;s information for each row of a given subsector.
   * @param clientId Customer identifier used for authentication.
   * @param accessToken Access token used in the authentication.
   * @param eventId Event to search.
   * @param sectorId Sector to search.
   * @param subsectorId Subsector to search.
   * @return List<Row>
  */
  public List<Row> getSubcsector (String clientId, String accessToken, String eventId, String sectorId, String subsectorId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'clientId' is set
      if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSubcsector",
      new ApiException(400, "Missing the required parameter 'clientId' when calling getSubcsector"));
      }
  
      // verify the required parameter 'accessToken' is set
      if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSubcsector",
      new ApiException(400, "Missing the required parameter 'accessToken' when calling getSubcsector"));
      }
  
      // verify the required parameter 'eventId' is set
      if (eventId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSubcsector",
      new ApiException(400, "Missing the required parameter 'eventId' when calling getSubcsector"));
      }
  
      // verify the required parameter 'sectorId' is set
      if (sectorId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectorId' when calling getSubcsector",
      new ApiException(400, "Missing the required parameter 'sectorId' when calling getSubcsector"));
      }
  
      // verify the required parameter 'subsectorId' is set
      if (subsectorId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsectorId' when calling getSubcsector",
      new ApiException(400, "Missing the required parameter 'subsectorId' when calling getSubcsector"));
      }
  

  // create path and map variables
  String path = "/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString())).replaceAll("\\{" + "sectorId" + "\\}", apiInvoker.escapeString(sectorId.toString())).replaceAll("\\{" + "subsectorId" + "\\}", apiInvoker.escapeString(subsectorId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
          headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Row>) ApiInvoker.deserialize(localVarResponse, "array", Row.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Returns a list of seat&#39;s information for each row of a given subsector.
   * @param clientId Customer identifier used for authentication.   * @param accessToken Access token used in the authentication.   * @param eventId Event to search.   * @param sectorId Sector to search.   * @param subsectorId Subsector to search.
  */
  private void getSubcsector (String clientId, String accessToken, String eventId, String sectorId, String subsectorId, final Response.Listener<List<Row>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSubcsector",
         new ApiException(400, "Missing the required parameter 'clientId' when calling getSubcsector"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSubcsector",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling getSubcsector"));
    }
    
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'eventId' when calling getSubcsector",
         new ApiException(400, "Missing the required parameter 'eventId' when calling getSubcsector"));
    }
    
    // verify the required parameter 'sectorId' is set
    if (sectorId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'sectorId' when calling getSubcsector",
         new ApiException(400, "Missing the required parameter 'sectorId' when calling getSubcsector"));
    }
    
    // verify the required parameter 'subsectorId' is set
    if (subsectorId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'subsectorId' when calling getSubcsector",
         new ApiException(400, "Missing the required parameter 'subsectorId' when calling getSubcsector"));
    }
    

    // create path and map variables
    String path = "/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "eventId" + "\\}", apiInvoker.escapeString(eventId.toString())).replaceAll("\\{" + "sectorId" + "\\}", apiInvoker.escapeString(sectorId.toString())).replaceAll("\\{" + "subsectorId" + "\\}", apiInvoker.escapeString(subsectorId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Row>) ApiInvoker.deserialize(localVarResponse,  "array", Row.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Returns a list of existing events.
   * @param clientId Customer identifier used for authentication.
   * @param accessToken Access token used in the authentication.
   * @return List<Events>
  */
  public List<Events> getEvents (String clientId, String accessToken) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'clientId' is set
      if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getEvents",
      new ApiException(400, "Missing the required parameter 'clientId' when calling getEvents"));
      }
  
      // verify the required parameter 'accessToken' is set
      if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getEvents",
      new ApiException(400, "Missing the required parameter 'accessToken' when calling getEvents"));
      }
  

  // create path and map variables
  String path = "/events".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
          headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Events>) ApiInvoker.deserialize(localVarResponse, "array", Events.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * Returns a list of existing events.
   * @param clientId Customer identifier used for authentication.   * @param accessToken Access token used in the authentication.
  */
  private void getEvents (String clientId, String accessToken, final Response.Listener<List<Events>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getEvents",
         new ApiException(400, "Missing the required parameter 'clientId' when calling getEvents"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getEvents",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling getEvents"));
    }
    

    // create path and map variables
    String path = "/events".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Events>) ApiInvoker.deserialize(localVarResponse,  "array", Events.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
