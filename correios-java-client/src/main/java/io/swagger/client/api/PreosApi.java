/*
 * API dos Correios
 * API de rastreios de Objetos Postais
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreosApi {
    private ApiClient apiClient;

    public PreosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for precosGet
     * @param clientId Identificaçáo do cliente usado na autenticaçáo. (required)
     * @param accessToken Access token usado na autenticaçáo. (required)
     * @param codigoServico Pode conter mais de um ódigo por consulta separados por virgula. 40010 - SEDEX Varejo, 40045 - SEDEX a Cobrar Varejo, 40215 - SEDEX 10 Varejo, 40290 - SEDEX Hoje Varejo, 41106 - PAC Varejo (required)
     * @param cepOrigem CEP de Origem sem hífen.Exemplo: 05311900 (required)
     * @param cepDestino CEP de Destino sem hífen (required)
     * @param peso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg (required)
     * @param formato Formato da encomenda (incluindo embalagem). 1 - Formato caixa/pacote, 2 - Formato rolo/prisma, 3 - Envelope (required)
     * @param comprimento Comprimento da encomenda (incluindo embalagem), em centímetros. (required)
     * @param altura Altura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0). (required)
     * @param largura Largura da encomenda (incluindo embalagem), em centímetros. (required)
     * @param diametro Diâmetro da encomenda (incluindo embalagem), em centímetros. (required)
     * @param valorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais. (required)
     * @param servicoMaoPropria Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @param avisoRecebimento Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call precosGetCall(String clientId, String accessToken, String codigoServico, String cepOrigem, String cepDestino, BigDecimal peso, Integer formato, BigDecimal comprimento, BigDecimal altura, BigDecimal largura, BigDecimal diametro, BigDecimal valorDeclarado, String servicoMaoPropria, String avisoRecebimento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/precos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (codigoServico != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "codigoServico", codigoServico));
        if (cepOrigem != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cepOrigem", cepOrigem));
        if (cepDestino != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cepDestino", cepDestino));
        if (peso != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "peso", peso));
        if (formato != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formato", formato));
        if (comprimento != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "comprimento", comprimento));
        if (altura != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "altura", altura));
        if (largura != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "largura", largura));
        if (diametro != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "diametro", diametro));
        if (servicoMaoPropria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "servicoMaoPropria", servicoMaoPropria));
        if (valorDeclarado != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "valorDeclarado", valorDeclarado));
        if (avisoRecebimento != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "avisoRecebimento", avisoRecebimento));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call precosGetValidateBeforeCall(String clientId, String accessToken, String codigoServico, String cepOrigem, String cepDestino, BigDecimal peso, Integer formato, BigDecimal comprimento, BigDecimal altura, BigDecimal largura, BigDecimal diametro, BigDecimal valorDeclarado, String servicoMaoPropria, String avisoRecebimento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'codigoServico' is set
        if (codigoServico == null) {
            throw new ApiException("Missing the required parameter 'codigoServico' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'cepOrigem' is set
        if (cepOrigem == null) {
            throw new ApiException("Missing the required parameter 'cepOrigem' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'cepDestino' is set
        if (cepDestino == null) {
            throw new ApiException("Missing the required parameter 'cepDestino' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'peso' is set
        if (peso == null) {
            throw new ApiException("Missing the required parameter 'peso' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'formato' is set
        if (formato == null) {
            throw new ApiException("Missing the required parameter 'formato' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'comprimento' is set
        if (comprimento == null) {
            throw new ApiException("Missing the required parameter 'comprimento' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'altura' is set
        if (altura == null) {
            throw new ApiException("Missing the required parameter 'altura' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'largura' is set
        if (largura == null) {
            throw new ApiException("Missing the required parameter 'largura' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'diametro' is set
        if (diametro == null) {
            throw new ApiException("Missing the required parameter 'diametro' when calling precosGet(Async)");
        }
        
        // verify the required parameter 'valorDeclarado' is set
        if (valorDeclarado == null) {
            throw new ApiException("Missing the required parameter 'valorDeclarado' when calling precosGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = precosGetCall(clientId, accessToken, codigoServico, cepOrigem, cepDestino, peso, formato, comprimento, altura, largura, diametro, valorDeclarado, servicoMaoPropria, avisoRecebimento, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Cálculo de Preços por CEP origem + CEP Destino e tipo de entrega.
     * @param clientId Identificaçáo do cliente usado na autenticaçáo. (required)
     * @param accessToken Access token usado na autenticaçáo. (required)
     * @param codigoServico Pode conter mais de um ódigo por consulta separados por virgula. 40010 - SEDEX Varejo, 40045 - SEDEX a Cobrar Varejo, 40215 - SEDEX 10 Varejo, 40290 - SEDEX Hoje Varejo, 41106 - PAC Varejo (required)
     * @param cepOrigem CEP de Origem sem hífen.Exemplo: 05311900 (required)
     * @param cepDestino CEP de Destino sem hífen (required)
     * @param peso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg (required)
     * @param formato Formato da encomenda (incluindo embalagem). 1 - Formato caixa/pacote, 2 - Formato rolo/prisma, 3 - Envelope (required)
     * @param comprimento Comprimento da encomenda (incluindo embalagem), em centímetros. (required)
     * @param altura Altura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0). (required)
     * @param largura Largura da encomenda (incluindo embalagem), em centímetros. (required)
     * @param diametro Diâmetro da encomenda (incluindo embalagem), em centímetros. (required)
     * @param valorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais. (required)
     * @param servicoMaoPropria Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @param avisoRecebimento Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2001> precosGet(String clientId, String accessToken, String codigoServico, String cepOrigem, String cepDestino, BigDecimal peso, Integer formato, BigDecimal comprimento, BigDecimal altura, BigDecimal largura, BigDecimal diametro, BigDecimal valorDeclarado, String servicoMaoPropria, String avisoRecebimento) throws ApiException {
        ApiResponse<List<InlineResponse2001>> resp = precosGetWithHttpInfo(clientId, accessToken, codigoServico, cepOrigem, cepDestino, peso, formato, comprimento, altura, largura, diametro, valorDeclarado, servicoMaoPropria, avisoRecebimento);
        return resp.getData();
    }

    /**
     * 
     * Cálculo de Preços por CEP origem + CEP Destino e tipo de entrega.
     * @param clientId Identificaçáo do cliente usado na autenticaçáo. (required)
     * @param accessToken Access token usado na autenticaçáo. (required)
     * @param codigoServico Pode conter mais de um ódigo por consulta separados por virgula. 40010 - SEDEX Varejo, 40045 - SEDEX a Cobrar Varejo, 40215 - SEDEX 10 Varejo, 40290 - SEDEX Hoje Varejo, 41106 - PAC Varejo (required)
     * @param cepOrigem CEP de Origem sem hífen.Exemplo: 05311900 (required)
     * @param cepDestino CEP de Destino sem hífen (required)
     * @param peso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg (required)
     * @param formato Formato da encomenda (incluindo embalagem). 1 - Formato caixa/pacote, 2 - Formato rolo/prisma, 3 - Envelope (required)
     * @param comprimento Comprimento da encomenda (incluindo embalagem), em centímetros. (required)
     * @param altura Altura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0). (required)
     * @param largura Largura da encomenda (incluindo embalagem), em centímetros. (required)
     * @param diametro Diâmetro da encomenda (incluindo embalagem), em centímetros. (required)
     * @param valorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais. (required)
     * @param servicoMaoPropria Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @param avisoRecebimento Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2001>> precosGetWithHttpInfo(String clientId, String accessToken, String codigoServico, String cepOrigem, String cepDestino, BigDecimal peso, Integer formato, BigDecimal comprimento, BigDecimal altura, BigDecimal largura, BigDecimal diametro, BigDecimal valorDeclarado, String servicoMaoPropria, String avisoRecebimento) throws ApiException {
        com.squareup.okhttp.Call call = precosGetValidateBeforeCall(clientId, accessToken, codigoServico, cepOrigem, cepDestino, peso, formato, comprimento, altura, largura, diametro, valorDeclarado, servicoMaoPropria, avisoRecebimento, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cálculo de Preços por CEP origem + CEP Destino e tipo de entrega.
     * @param clientId Identificaçáo do cliente usado na autenticaçáo. (required)
     * @param accessToken Access token usado na autenticaçáo. (required)
     * @param codigoServico Pode conter mais de um ódigo por consulta separados por virgula. 40010 - SEDEX Varejo, 40045 - SEDEX a Cobrar Varejo, 40215 - SEDEX 10 Varejo, 40290 - SEDEX Hoje Varejo, 41106 - PAC Varejo (required)
     * @param cepOrigem CEP de Origem sem hífen.Exemplo: 05311900 (required)
     * @param cepDestino CEP de Destino sem hífen (required)
     * @param peso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg (required)
     * @param formato Formato da encomenda (incluindo embalagem). 1 - Formato caixa/pacote, 2 - Formato rolo/prisma, 3 - Envelope (required)
     * @param comprimento Comprimento da encomenda (incluindo embalagem), em centímetros. (required)
     * @param altura Altura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0). (required)
     * @param largura Largura da encomenda (incluindo embalagem), em centímetros. (required)
     * @param diametro Diâmetro da encomenda (incluindo embalagem), em centímetros. (required)
     * @param valorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais. (required)
     * @param servicoMaoPropria Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @param avisoRecebimento Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S - Sim, N - Não) (optional, default to N)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call precosGetAsync(String clientId, String accessToken, String codigoServico, String cepOrigem, String cepDestino, BigDecimal peso, Integer formato, BigDecimal comprimento, BigDecimal altura, BigDecimal largura, BigDecimal diametro, BigDecimal valorDeclarado, String servicoMaoPropria, String avisoRecebimento, final ApiCallback<List<InlineResponse2001>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = precosGetValidateBeforeCall(clientId, accessToken, codigoServico, cepOrigem, cepDestino, peso, formato, comprimento, altura, largura, diametro, valorDeclarado, servicoMaoPropria, avisoRecebimento, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
