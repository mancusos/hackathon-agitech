/**
 * API Agillitas Cartões Pré-pagos
 * API para manipular recursos relacionadas aos  cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sensedia.agillitas.api.v1;

import com.sensedia.agillitas.api.v1.client.ApiInvoker;
import com.sensedia.agillitas.api.v1.client.ApiException;
import com.sensedia.agillitas.api.v1.client.Pair;

import com.sensedia.agillitas.api.v1.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.Date;
import com.sensedia.agillitas.api.v1.model.ExtratoResponse;
import com.sensedia.agillitas.api.v1.model.MsgErro;
import com.sensedia.agillitas.api.v1.model.PortadorResponse;
import com.sensedia.agillitas.api.v1.model.Saldo;
import com.sensedia.agillitas.api.v1.model.SetCardStatus;
import com.sensedia.agillitas.api.v1.model.SetNovoCartao;
import com.sensedia.agillitas.api.v1.model.SetSaldo;
import com.sensedia.agillitas.api.v1.model.StatusCartaoResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CartoesApi {
  String basePath = "https://api-visa.sensedia.com/sandbox/visa/agillitas/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Consulta o extrato do cartão
  * &lt;p&gt;Permite a consulta dos movimentos por período de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.
   * @param accessToken Token de acesso utilizado na autenticação.
   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
   * @param dataInicial Data inicial para a consulta (YYYY-MM-DD).
   * @param dataFinal Data final para a consulta (YYYY-MM-DD)..
   * @return ExtratoResponse
  */
  public ExtratoResponse getExtrato (String clientId, String accessToken, String idCartao, Date dataInicial, Date dataFinal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getExtrato"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getExtrato"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getExtrato"));
    }
    // verify the required parameter 'dataInicial' is set
    if (dataInicial == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataInicial' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'dataInicial' when calling getExtrato"));
    }
    // verify the required parameter 'dataFinal' is set
    if (dataFinal == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataFinal' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'dataFinal' when calling getExtrato"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/extrato".replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dataInicial", dataInicial));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dataFinal", dataFinal));
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExtratoResponse) ApiInvoker.deserialize(localVarResponse, "", ExtratoResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Consulta o extrato do cartão
   * &lt;p&gt;Permite a consulta dos movimentos por período de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.   * @param accessToken Token de acesso utilizado na autenticação.   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.   * @param dataInicial Data inicial para a consulta (YYYY-MM-DD).   * @param dataFinal Data final para a consulta (YYYY-MM-DD)..
  */
  private void getExtrato (String clientId, String accessToken, String idCartao, Date dataInicial, Date dataFinal, final Response.Listener<ExtratoResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getExtrato"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getExtrato"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getExtrato"));
    }
    // verify the required parameter 'dataInicial' is set
    if (dataInicial == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataInicial' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'dataInicial' when calling getExtrato"));
    }
    // verify the required parameter 'dataFinal' is set
    if (dataFinal == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataFinal' when calling getExtrato",
        new ApiException(400, "Missing the required parameter 'dataFinal' when calling getExtrato"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/extrato".replaceAll("\\{format\\}","json").replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "dataInicial", dataInicial));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dataFinal", dataFinal));

    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExtratoResponse) ApiInvoker.deserialize(localVarResponse,  "", ExtratoResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Consuta informações do portador do cartão
  * &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.
   * @param accessToken Token de acesso utilizado na autenticação.
   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
   * @return PortadorResponse
  */
  public PortadorResponse getPortador (String clientId, String accessToken, String idCartao) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getPortador",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getPortador"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getPortador",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getPortador"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getPortador",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getPortador"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/portador".replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PortadorResponse) ApiInvoker.deserialize(localVarResponse, "", PortadorResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Consuta informações do portador do cartão
   * &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.   * @param accessToken Token de acesso utilizado na autenticação.   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
  */
  private void getPortador (String clientId, String accessToken, String idCartao, final Response.Listener<PortadorResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getPortador",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getPortador"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getPortador",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getPortador"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getPortador",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getPortador"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/portador".replaceAll("\\{format\\}","json").replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PortadorResponse) ApiInvoker.deserialize(localVarResponse,  "", PortadorResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Consulta o saldo do cartão
  * &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.
   * @param accessToken Token de acesso utilizado na autenticação.
   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
   * @return Saldo
  */
  public Saldo getSaldo (String clientId, String accessToken, String idCartao) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSaldo",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getSaldo"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSaldo",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getSaldo"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getSaldo",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getSaldo"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/saldo".replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Saldo) ApiInvoker.deserialize(localVarResponse, "", Saldo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Consulta o saldo do cartão
   * &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.   * @param accessToken Token de acesso utilizado na autenticação.   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
  */
  private void getSaldo (String clientId, String accessToken, String idCartao, final Response.Listener<Saldo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getSaldo",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getSaldo"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getSaldo",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getSaldo"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getSaldo",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getSaldo"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/saldo".replaceAll("\\{format\\}","json").replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Saldo) ApiInvoker.deserialize(localVarResponse,  "", Saldo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Credita ou debita valor da conta de um cartão.
  * &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.
   * @param accessToken Token de acesso utilizado na autenticação.
   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
   * @param saldo Objeto de requisição
   * @return void
  */
  public void atualizarSaldo (String clientId, String accessToken, String idCartao, SetSaldo saldo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = saldo;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'clientId' when calling atualizarSaldo"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling atualizarSaldo"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling atualizarSaldo"));
    }
    // verify the required parameter 'saldo' is set
    if (saldo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'saldo' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'saldo' when calling atualizarSaldo"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/saldo".replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Credita ou debita valor da conta de um cartão.
   * &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.   * @param accessToken Token de acesso utilizado na autenticação.   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.   * @param saldo Objeto de requisição
  */
  private void atualizarSaldo (String clientId, String accessToken, String idCartao, SetSaldo saldo, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = saldo;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'clientId' when calling atualizarSaldo"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling atualizarSaldo"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling atualizarSaldo"));
    }
    // verify the required parameter 'saldo' is set
    if (saldo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'saldo' when calling atualizarSaldo",
        new ApiException(400, "Missing the required parameter 'saldo' when calling atualizarSaldo"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/saldo".replaceAll("\\{format\\}","json").replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Consulta o status do cartão
  * &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado, desbloqueado ou cancelado.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.
   * @param accessToken Token de acesso utilizado na autenticação.
   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
   * @return StatusCartaoResponse
  */
  public StatusCartaoResponse getCartaoStatus (String clientId, String accessToken, String idCartao) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getCartaoStatus",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getCartaoStatus"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getCartaoStatus",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getCartaoStatus"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getCartaoStatus",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getCartaoStatus"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/status".replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StatusCartaoResponse) ApiInvoker.deserialize(localVarResponse, "", StatusCartaoResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Consulta o status do cartão
   * &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado, desbloqueado ou cancelado.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.   * @param accessToken Token de acesso utilizado na autenticação.   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
  */
  private void getCartaoStatus (String clientId, String accessToken, String idCartao, final Response.Listener<StatusCartaoResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getCartaoStatus",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getCartaoStatus"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getCartaoStatus",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getCartaoStatus"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling getCartaoStatus",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling getCartaoStatus"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StatusCartaoResponse) ApiInvoker.deserialize(localVarResponse,  "", StatusCartaoResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Altera status do cartão
  * &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.
   * @param accessToken Token de acesso utilizado na autenticação.
   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.
   * @param status Objeto de requisição
   * @return void
  */
  public void atualizarCartaoStatus (String clientId, String accessToken, String idCartao, SetCardStatus status) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = status;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'clientId' when calling atualizarCartaoStatus"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling atualizarCartaoStatus"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling atualizarCartaoStatus"));
    }
    // verify the required parameter 'status' is set
    if (status == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'status' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'status' when calling atualizarCartaoStatus"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/status".replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Altera status do cartão
   * &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
   * @param clientId Identificador do cliente utilizado na autenticação.   * @param accessToken Token de acesso utilizado na autenticação.   * @param idCartao Número identificador referente ao proxy localizado no verso do cartão.   * @param status Objeto de requisição
  */
  private void atualizarCartaoStatus (String clientId, String accessToken, String idCartao, SetCardStatus status, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = status;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'clientId' when calling atualizarCartaoStatus"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling atualizarCartaoStatus"));
    }
    // verify the required parameter 'idCartao' is set
    if (idCartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'idCartao' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'idCartao' when calling atualizarCartaoStatus"));
    }
    // verify the required parameter 'status' is set
    if (status == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'status' when calling atualizarCartaoStatus",
        new ApiException(400, "Missing the required parameter 'status' when calling atualizarCartaoStatus"));
    }

    // create path and map variables
    String path = "/cartoes/{idCartao}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "idCartao" + "\\}", apiInvoker.escapeString(idCartao.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Associa um número de proxy de cartão a um portador.
  * &lt;p&gt;Operação responsável por associar um número proxy de cartão a um portador.&lt;/p&gt;&lt;br/&gt; &lt;p&gt;Esse processo de liberação é assíncrono.&lt;/p&gt; 
   * @param clientId Identificador do cliente utilizado na autenticação.
   * @param accessToken Token de acesso utilizado na autenticação.
   * @param cartao Objeto de requisição
   * @return void
  */
  public void associarCartao (String clientId, String accessToken, SetNovoCartao cartao) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = cartao;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling associarCartao",
        new ApiException(400, "Missing the required parameter 'clientId' when calling associarCartao"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling associarCartao",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling associarCartao"));
    }
    // verify the required parameter 'cartao' is set
    if (cartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cartao' when calling associarCartao",
        new ApiException(400, "Missing the required parameter 'cartao' when calling associarCartao"));
    }

    // create path and map variables
    String path = "/cartoes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Associa um número de proxy de cartão a um portador.
   * &lt;p&gt;Operação responsável por associar um número proxy de cartão a um portador.&lt;/p&gt;&lt;br/&gt; &lt;p&gt;Esse processo de liberação é assíncrono.&lt;/p&gt; 
   * @param clientId Identificador do cliente utilizado na autenticação.   * @param accessToken Token de acesso utilizado na autenticação.   * @param cartao Objeto de requisição
  */
  private void associarCartao (String clientId, String accessToken, SetNovoCartao cartao, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = cartao;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling associarCartao",
        new ApiException(400, "Missing the required parameter 'clientId' when calling associarCartao"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling associarCartao",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling associarCartao"));
    }
    // verify the required parameter 'cartao' is set
    if (cartao == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cartao' when calling associarCartao",
        new ApiException(400, "Missing the required parameter 'cartao' when calling associarCartao"));
    }

    // create path and map variables
    String path = "/cartoes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
