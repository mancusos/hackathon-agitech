/*
 * API do Futebolcard
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient apiClient;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for eventsEventIdGet
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdGetCall(String clientId, String accessToken, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdGetValidateBeforeCall(String clientId, String accessToken, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eventsEventIdGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling eventsEventIdGet(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsEventIdGetCall(clientId, accessToken, eventId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns the details for a specific occurring event.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 eventsEventIdGet(String clientId, String accessToken, String eventId) throws ApiException {
        ApiResponse<InlineResponse200> resp = eventsEventIdGetWithHttpInfo(clientId, accessToken, eventId);
        return resp.getData();
    }

    /**
     * 
     * Returns the details for a specific occurring event.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> eventsEventIdGetWithHttpInfo(String clientId, String accessToken, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdGetValidateBeforeCall(clientId, accessToken, eventId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the details for a specific occurring event.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdGetAsync(String clientId, String accessToken, String eventId, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdGetValidateBeforeCall(clientId, accessToken, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdSectorsGet
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsGetCall(String clientId, String accessToken, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/sectors"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdSectorsGetValidateBeforeCall(String clientId, String accessToken, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eventsEventIdSectorsGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsGet(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdSectorsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsEventIdSectorsGetCall(clientId, accessToken, eventId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of sector for the given event.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 eventsEventIdSectorsGet(String clientId, String accessToken, String eventId) throws ApiException {
        ApiResponse<InlineResponse2001> resp = eventsEventIdSectorsGetWithHttpInfo(clientId, accessToken, eventId);
        return resp.getData();
    }

    /**
     * 
     * Returns a list of sector for the given event.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> eventsEventIdSectorsGetWithHttpInfo(String clientId, String accessToken, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdSectorsGetValidateBeforeCall(clientId, accessToken, eventId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of sector for the given event.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsGetAsync(String clientId, String accessToken, String eventId, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdSectorsGetValidateBeforeCall(clientId, accessToken, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdSectorsSectorIdGet
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsSectorIdGetCall(String clientId, String accessToken, String eventId, String sectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/sectors/{sectorId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "sectorId" + "\\}", apiClient.escapeString(sectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdSectorsSectorIdGetValidateBeforeCall(String clientId, String accessToken, String eventId, String sectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eventsEventIdSectorsSectorIdGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsSectorIdGet(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdSectorsSectorIdGet(Async)");
        }
        
        // verify the required parameter 'sectorId' is set
        if (sectorId == null) {
            throw new ApiException("Missing the required parameter 'sectorId' when calling eventsEventIdSectorsSectorIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdGetCall(clientId, accessToken, eventId, sectorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns the details of a specific sector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 eventsEventIdSectorsSectorIdGet(String clientId, String accessToken, String eventId, String sectorId) throws ApiException {
        ApiResponse<InlineResponse2002> resp = eventsEventIdSectorsSectorIdGetWithHttpInfo(clientId, accessToken, eventId, sectorId);
        return resp.getData();
    }

    /**
     * 
     * Returns the details of a specific sector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> eventsEventIdSectorsSectorIdGetWithHttpInfo(String clientId, String accessToken, String eventId, String sectorId) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdGetValidateBeforeCall(clientId, accessToken, eventId, sectorId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the details of a specific sector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsSectorIdGetAsync(String clientId, String accessToken, String eventId, String sectorId, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdGetValidateBeforeCall(clientId, accessToken, eventId, sectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdSectorsSectorIdSubsectorsGet
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsSectorIdSubsectorsGetCall(String clientId, String accessToken, String eventId, String sectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/sectors/{sectorId}/subsectors"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "sectorId" + "\\}", apiClient.escapeString(sectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdSectorsSectorIdSubsectorsGetValidateBeforeCall(String clientId, String accessToken, String eventId, String sectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eventsEventIdSectorsSectorIdSubsectorsGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsSectorIdSubsectorsGet(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdSectorsSectorIdSubsectorsGet(Async)");
        }
        
        // verify the required parameter 'sectorId' is set
        if (sectorId == null) {
            throw new ApiException("Missing the required parameter 'sectorId' when calling eventsEventIdSectorsSectorIdSubsectorsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdSubsectorsGetCall(clientId, accessToken, eventId, sectorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of subcsectors for a given sector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 eventsEventIdSectorsSectorIdSubsectorsGet(String clientId, String accessToken, String eventId, String sectorId) throws ApiException {
        ApiResponse<InlineResponse2002> resp = eventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo(clientId, accessToken, eventId, sectorId);
        return resp.getData();
    }

    /**
     * 
     * Returns a list of subcsectors for a given sector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> eventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo(String clientId, String accessToken, String eventId, String sectorId) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdSubsectorsGetValidateBeforeCall(clientId, accessToken, eventId, sectorId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of subcsectors for a given sector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsSectorIdSubsectorsGetAsync(String clientId, String accessToken, String eventId, String sectorId, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdSubsectorsGetValidateBeforeCall(clientId, accessToken, eventId, sectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param subsectorId Subsector to search. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetCall(String clientId, String accessToken, String eventId, String sectorId, String subsectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "sectorId" + "\\}", apiClient.escapeString(sectorId.toString()))
            .replaceAll("\\{" + "subsectorId" + "\\}", apiClient.escapeString(subsectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetValidateBeforeCall(String clientId, String accessToken, String eventId, String sectorId, String subsectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet(Async)");
        }
        
        // verify the required parameter 'sectorId' is set
        if (sectorId == null) {
            throw new ApiException("Missing the required parameter 'sectorId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet(Async)");
        }
        
        // verify the required parameter 'subsectorId' is set
        if (subsectorId == null) {
            throw new ApiException("Missing the required parameter 'subsectorId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetCall(clientId, accessToken, eventId, sectorId, subsectorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of seat&#39;s information for each row of a given subsector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param subsectorId Subsector to search. (required)
     * @return List&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2003> eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet(String clientId, String accessToken, String eventId, String sectorId, String subsectorId) throws ApiException {
        ApiResponse<List<InlineResponse2003>> resp = eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo(clientId, accessToken, eventId, sectorId, subsectorId);
        return resp.getData();
    }

    /**
     * 
     * Returns a list of seat&#39;s information for each row of a given subsector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param subsectorId Subsector to search. (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2003&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2003>> eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo(String clientId, String accessToken, String eventId, String sectorId, String subsectorId) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetValidateBeforeCall(clientId, accessToken, eventId, sectorId, subsectorId, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of seat&#39;s information for each row of a given subsector.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventId Event to search. (required)
     * @param sectorId Sector to search. (required)
     * @param subsectorId Subsector to search. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetAsync(String clientId, String accessToken, String eventId, String sectorId, String subsectorId, final ApiCallback<List<InlineResponse2003>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetValidateBeforeCall(clientId, accessToken, eventId, sectorId, subsectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsGet
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsGetCall(String clientId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsGetValidateBeforeCall(String clientId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eventsGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling eventsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsGetCall(clientId, accessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of existing events.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse200> eventsGet(String clientId, String accessToken) throws ApiException {
        ApiResponse<List<InlineResponse200>> resp = eventsGetWithHttpInfo(clientId, accessToken);
        return resp.getData();
    }

    /**
     * 
     * Returns a list of existing events.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse200>> eventsGetWithHttpInfo(String clientId, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = eventsGetValidateBeforeCall(clientId, accessToken, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing events.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsGetAsync(String clientId, String accessToken, final ApiCallback<List<InlineResponse200>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsGetValidateBeforeCall(clientId, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
