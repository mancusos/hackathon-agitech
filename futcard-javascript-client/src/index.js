/**
 * API do Futebolcard
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Coordinate', 'model/Error', 'model/Events', 'model/Gates', 'model/Map', 'model/Row', 'model/Seat', 'model/SectorDetail', 'model/Sectors', 'model/SubSectorDetails', 'model/SubSectors', 'api/EventsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Coordinate'), require('./model/Error'), require('./model/Events'), require('./model/Gates'), require('./model/Map'), require('./model/Row'), require('./model/Seat'), require('./model/SectorDetail'), require('./model/Sectors'), require('./model/SubSectorDetails'), require('./model/SubSectors'), require('./api/EventsApi'));
  }
}(function(ApiClient, Coordinate, Error, Events, Gates, Map, Row, Seat, SectorDetail, Sectors, SubSectorDetails, SubSectors, EventsApi) {
  'use strict';

  /**
   * Futebolcard_manipulation_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ApiDoFutebolcard = require('index'); // See note below*.
   * var xxxSvc = new ApiDoFutebolcard.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ApiDoFutebolcard.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ApiDoFutebolcard.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ApiDoFutebolcard.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Coordinate model constructor.
     * @property {module:model/Coordinate}
     */
    Coordinate: Coordinate,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Events model constructor.
     * @property {module:model/Events}
     */
    Events: Events,
    /**
     * The Gates model constructor.
     * @property {module:model/Gates}
     */
    Gates: Gates,
    /**
     * The Map model constructor.
     * @property {module:model/Map}
     */
    Map: Map,
    /**
     * The Row model constructor.
     * @property {module:model/Row}
     */
    Row: Row,
    /**
     * The Seat model constructor.
     * @property {module:model/Seat}
     */
    Seat: Seat,
    /**
     * The SectorDetail model constructor.
     * @property {module:model/SectorDetail}
     */
    SectorDetail: SectorDetail,
    /**
     * The Sectors model constructor.
     * @property {module:model/Sectors}
     */
    Sectors: Sectors,
    /**
     * The SubSectorDetails model constructor.
     * @property {module:model/SubSectorDetails}
     */
    SubSectorDetails: SubSectorDetails,
    /**
     * The SubSectors model constructor.
     * @property {module:model/SubSectors}
     */
    SubSectors: SubSectors,
    /**
     * The EventsApi service constructor.
     * @property {module:api/EventsApi}
     */
    EventsApi: EventsApi
  };

  return exports;
}));
