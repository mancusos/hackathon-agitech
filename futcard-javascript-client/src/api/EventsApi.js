/**
 * API do Futebolcard
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Events', 'model/Row', 'model/Sectors', 'model/SubSectors'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Events'), require('../model/Row'), require('../model/Sectors'), require('../model/SubSectors'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiDoFutebolcard) {
      root.ApiDoFutebolcard = {};
    }
    root.ApiDoFutebolcard.EventsApi = factory(root.ApiDoFutebolcard.ApiClient, root.ApiDoFutebolcard.Error, root.ApiDoFutebolcard.Events, root.ApiDoFutebolcard.Row, root.ApiDoFutebolcard.Sectors, root.ApiDoFutebolcard.SubSectors);
  }
}(this, function(ApiClient, Error, Events, Row, Sectors, SubSectors) {
  'use strict';

  /**
   * Events service.
   * @module api/EventsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EventsApi. 
   * @alias module:api/EventsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the eventsEventIdGet operation.
     * @callback module:api/EventsApi~eventsEventIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Events} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details for a specific occurring event.
     * @param {String} clientId Customer identifier used for authentication.
     * @param {String} accessToken Access token used in the authentication.
     * @param {String} eventId Event to search.
     * @param {module:api/EventsApi~eventsEventIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Events}
     */
    this.eventsEventIdGet = function(clientId, accessToken, eventId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling eventsEventIdGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling eventsEventIdGet");
      }

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Events;

      return this.apiClient.callApi(
        '/events/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdSectorsGet operation.
     * @callback module:api/EventsApi~eventsEventIdSectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sectors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of sector for the given event.
     * @param {String} clientId Customer identifier used for authentication.
     * @param {String} accessToken Access token used in the authentication.
     * @param {String} eventId Event to search.
     * @param {module:api/EventsApi~eventsEventIdSectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sectors}
     */
    this.eventsEventIdSectorsGet = function(clientId, accessToken, eventId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling eventsEventIdSectorsGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsGet");
      }

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdSectorsGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Sectors;

      return this.apiClient.callApi(
        '/events/{eventId}/sectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdSectorsSectorIdGet operation.
     * @callback module:api/EventsApi~eventsEventIdSectorsSectorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubSectors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a specific sector.
     * @param {String} clientId Customer identifier used for authentication.
     * @param {String} accessToken Access token used in the authentication.
     * @param {String} eventId Event to search.
     * @param {String} sectorId Sector to search.
     * @param {module:api/EventsApi~eventsEventIdSectorsSectorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubSectors}
     */
    this.eventsEventIdSectorsSectorIdGet = function(clientId, accessToken, eventId, sectorId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling eventsEventIdSectorsSectorIdGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsSectorIdGet");
      }

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdSectorsSectorIdGet");
      }

      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling eventsEventIdSectorsSectorIdGet");
      }


      var pathParams = {
        'eventId': eventId,
        'sectorId': sectorId
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = SubSectors;

      return this.apiClient.callApi(
        '/events/{eventId}/sectors/{sectorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdSectorsSectorIdSubsectorsGet operation.
     * @callback module:api/EventsApi~eventsEventIdSectorsSectorIdSubsectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubSectors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of subcsectors for a given sector.
     * @param {String} clientId Customer identifier used for authentication.
     * @param {String} accessToken Access token used in the authentication.
     * @param {String} eventId Event to search.
     * @param {String} sectorId Sector to search.
     * @param {module:api/EventsApi~eventsEventIdSectorsSectorIdSubsectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubSectors}
     */
    this.eventsEventIdSectorsSectorIdSubsectorsGet = function(clientId, accessToken, eventId, sectorId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling eventsEventIdSectorsSectorIdSubsectorsGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsSectorIdSubsectorsGet");
      }

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdSectorsSectorIdSubsectorsGet");
      }

      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling eventsEventIdSectorsSectorIdSubsectorsGet");
      }


      var pathParams = {
        'eventId': eventId,
        'sectorId': sectorId
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = SubSectors;

      return this.apiClient.callApi(
        '/events/{eventId}/sectors/{sectorId}/subsectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet operation.
     * @callback module:api/EventsApi~eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Row>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of seat&#39;s information for each row of a given subsector.
     * @param {String} clientId Customer identifier used for authentication.
     * @param {String} accessToken Access token used in the authentication.
     * @param {String} eventId Event to search.
     * @param {String} sectorId Sector to search.
     * @param {String} subsectorId Subsector to search.
     * @param {module:api/EventsApi~eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Row>}
     */
    this.eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet = function(clientId, accessToken, eventId, sectorId, subsectorId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
      }

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
      }

      // verify the required parameter 'sectorId' is set
      if (sectorId === undefined || sectorId === null) {
        throw new Error("Missing the required parameter 'sectorId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
      }

      // verify the required parameter 'subsectorId' is set
      if (subsectorId === undefined || subsectorId === null) {
        throw new Error("Missing the required parameter 'subsectorId' when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
      }


      var pathParams = {
        'eventId': eventId,
        'sectorId': sectorId,
        'subsectorId': subsectorId
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Row];

      return this.apiClient.callApi(
        '/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsGet operation.
     * @callback module:api/EventsApi~eventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Events>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing events.
     * @param {String} clientId Customer identifier used for authentication.
     * @param {String} accessToken Access token used in the authentication.
     * @param {module:api/EventsApi~eventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Events>}
     */
    this.eventsGet = function(clientId, accessToken, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling eventsGet");
      }

      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling eventsGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Events];

      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
