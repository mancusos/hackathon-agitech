/**
 * API dos Correios
 * API de rastreios de Objetos Postais
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package br.com.sensedia.correios.api.v1;

import br.com.sensedia.correios.api.v1.client.ApiInvoker;
import br.com.sensedia.correios.api.v1.client.ApiException;
import br.com.sensedia.correios.api.v1.client.Pair;

import br.com.sensedia.correios.api.v1.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import br.com.sensedia.correios.api.v1.model.CalculoPrecoFrete;
import br.com.sensedia.correios.api.v1.model.Erro;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PrecosApi {
  String basePath = "https://api-visa.sensedia.com/sandbox/visa/correios/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Cálculo de Preços por CEP de origem, CEP de destino e tipo de entrega.
   * @param clientId Identificaçáo do cliente usado na autenticaçáo.
   * @param accessToken Access token usado na autenticaçáo.
   * @param codigoServico Pode conter mais de um código por consulta separados por virgula. 40010 - SEDEX Varejo, 40045 - SEDEX a Cobrar Varejo, 40215 - SEDEX 10 Varejo, 40290 - SEDEX Hoje Varejo, 41106 - PAC Varejo
   * @param cepOrigem CEP de Origem sem hífen.Exemplo: 05311900
   * @param cepDestino CEP de Destino sem hífen
   * @param peso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg
   * @param formato Formato da encomenda (incluindo embalagem). 1 - Formato caixa/pacote, 2 - Formato rolo/prisma, 3 - Envelope
   * @param comprimento Comprimento da encomenda (incluindo embalagem), em centímetros.
   * @param altura Altura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0).
   * @param largura Largura da encomenda (incluindo embalagem), em centímetros.
   * @param diametro Diâmetro da encomenda (incluindo embalagem), em centímetros.
   * @param servicoMaoPropria Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S - Sim, N - Não)
   * @param valorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais.
   * @param avisoRecebimento Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S - Sim, N - Não)
   * @param codigoEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios.
   * @param senhaEmpresa Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato.
   * @return List<CalculoPrecoFrete>
  */
  public List<CalculoPrecoFrete> getPrecos (String clientId, String accessToken, String codigoServico, String cepOrigem, String cepDestino, Integer peso, Integer formato, Integer comprimento, Integer altura, Integer largura, Integer diametro, String servicoMaoPropria, Integer valorDeclarado, String avisoRecebimento, String codigoEmpresa, String senhaEmpresa) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getPrecos"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getPrecos"));
    }
    // verify the required parameter 'codigoServico' is set
    if (codigoServico == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codigoServico' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'codigoServico' when calling getPrecos"));
    }
    // verify the required parameter 'cepOrigem' is set
    if (cepOrigem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cepOrigem' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'cepOrigem' when calling getPrecos"));
    }
    // verify the required parameter 'cepDestino' is set
    if (cepDestino == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cepDestino' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'cepDestino' when calling getPrecos"));
    }
    // verify the required parameter 'peso' is set
    if (peso == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'peso' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'peso' when calling getPrecos"));
    }
    // verify the required parameter 'formato' is set
    if (formato == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'formato' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'formato' when calling getPrecos"));
    }
    // verify the required parameter 'comprimento' is set
    if (comprimento == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comprimento' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'comprimento' when calling getPrecos"));
    }
    // verify the required parameter 'altura' is set
    if (altura == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'altura' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'altura' when calling getPrecos"));
    }
    // verify the required parameter 'largura' is set
    if (largura == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'largura' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'largura' when calling getPrecos"));
    }
    // verify the required parameter 'diametro' is set
    if (diametro == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'diametro' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'diametro' when calling getPrecos"));
    }

    // create path and map variables
    String path = "/precos";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigoServico", codigoServico));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cepOrigem", cepOrigem));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cepDestino", cepDestino));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "peso", peso));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "formato", formato));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "comprimento", comprimento));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altura", altura));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "largura", largura));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "diametro", diametro));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "servicoMaoPropria", servicoMaoPropria));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "valorDeclarado", valorDeclarado));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avisoRecebimento", avisoRecebimento));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigoEmpresa", codigoEmpresa));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "senhaEmpresa", senhaEmpresa));
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<CalculoPrecoFrete>) ApiInvoker.deserialize(localVarResponse, "array", CalculoPrecoFrete.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Cálculo de Preços por CEP de origem, CEP de destino e tipo de entrega.
   * @param clientId Identificaçáo do cliente usado na autenticaçáo.   * @param accessToken Access token usado na autenticaçáo.   * @param codigoServico Pode conter mais de um código por consulta separados por virgula. 40010 - SEDEX Varejo, 40045 - SEDEX a Cobrar Varejo, 40215 - SEDEX 10 Varejo, 40290 - SEDEX Hoje Varejo, 41106 - PAC Varejo   * @param cepOrigem CEP de Origem sem hífen.Exemplo: 05311900   * @param cepDestino CEP de Destino sem hífen   * @param peso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg   * @param formato Formato da encomenda (incluindo embalagem). 1 - Formato caixa/pacote, 2 - Formato rolo/prisma, 3 - Envelope   * @param comprimento Comprimento da encomenda (incluindo embalagem), em centímetros.   * @param altura Altura da encomenda (incluindo embalagem), em centímetros. Se o formato for envelope, informar zero (0).   * @param largura Largura da encomenda (incluindo embalagem), em centímetros.   * @param diametro Diâmetro da encomenda (incluindo embalagem), em centímetros.   * @param servicoMaoPropria Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S - Sim, N - Não)   * @param valorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais.   * @param avisoRecebimento Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S - Sim, N - Não)   * @param codigoEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios.   * @param senhaEmpresa Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato.
  */
  private void getPrecos (String clientId, String accessToken, String codigoServico, String cepOrigem, String cepDestino, Integer peso, Integer formato, Integer comprimento, Integer altura, Integer largura, Integer diametro, String servicoMaoPropria, Integer valorDeclarado, String avisoRecebimento, String codigoEmpresa, String senhaEmpresa, final Response.Listener<List<CalculoPrecoFrete>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getPrecos"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getPrecos"));
    }
    // verify the required parameter 'codigoServico' is set
    if (codigoServico == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codigoServico' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'codigoServico' when calling getPrecos"));
    }
    // verify the required parameter 'cepOrigem' is set
    if (cepOrigem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cepOrigem' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'cepOrigem' when calling getPrecos"));
    }
    // verify the required parameter 'cepDestino' is set
    if (cepDestino == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cepDestino' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'cepDestino' when calling getPrecos"));
    }
    // verify the required parameter 'peso' is set
    if (peso == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'peso' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'peso' when calling getPrecos"));
    }
    // verify the required parameter 'formato' is set
    if (formato == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'formato' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'formato' when calling getPrecos"));
    }
    // verify the required parameter 'comprimento' is set
    if (comprimento == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comprimento' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'comprimento' when calling getPrecos"));
    }
    // verify the required parameter 'altura' is set
    if (altura == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'altura' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'altura' when calling getPrecos"));
    }
    // verify the required parameter 'largura' is set
    if (largura == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'largura' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'largura' when calling getPrecos"));
    }
    // verify the required parameter 'diametro' is set
    if (diametro == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'diametro' when calling getPrecos",
        new ApiException(400, "Missing the required parameter 'diametro' when calling getPrecos"));
    }

    // create path and map variables
    String path = "/precos".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigoServico", codigoServico));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cepOrigem", cepOrigem));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cepDestino", cepDestino));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "peso", peso));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "formato", formato));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "comprimento", comprimento));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altura", altura));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "largura", largura));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "diametro", diametro));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "servicoMaoPropria", servicoMaoPropria));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "valorDeclarado", valorDeclarado));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avisoRecebimento", avisoRecebimento));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "codigoEmpresa", codigoEmpresa));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "senhaEmpresa", senhaEmpresa));

    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<CalculoPrecoFrete>) ApiInvoker.deserialize(localVarResponse,  "array", CalculoPrecoFrete.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
