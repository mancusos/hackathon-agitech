/**
 * API dos Correios
 * API de rastreios de Objetos Postais
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package br.com.sensedia.correios.api.v1;

import br.com.sensedia.correios.api.v1.client.ApiInvoker;
import br.com.sensedia.correios.api.v1.client.ApiException;
import br.com.sensedia.correios.api.v1.client.Pair;

import br.com.sensedia.correios.api.v1.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import br.com.sensedia.correios.api.v1.model.Erro;
import br.com.sensedia.correios.api.v1.model.FaixaCEP;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CEPApi {
  String basePath = "https://api-visa.sensedia.com/sandbox/visa/correios/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Pesquisa pela faixa de CEPs nos municipios de um Estado.
   * @param clientId Identificaçáo do cliente usado na autenticaçáo.
   * @param accessToken Access token usado na autenticaçáo.
   * @param estado Abreviaçáo do Estado.
   * @param municipio Nome do Município.
   * @return List<FaixaCEP>
  */
  public List<FaixaCEP> getCeps (String clientId, String accessToken, String estado, String municipio) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getCeps",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getCeps"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getCeps",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getCeps"));
    }
    // verify the required parameter 'estado' is set
    if (estado == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'estado' when calling getCeps",
        new ApiException(400, "Missing the required parameter 'estado' when calling getCeps"));
    }

    // create path and map variables
    String path = "/cep/{estado}".replaceAll("\\{" + "estado" + "\\}", apiInvoker.escapeString(estado.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "municipio", municipio));
    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<FaixaCEP>) ApiInvoker.deserialize(localVarResponse, "array", FaixaCEP.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Pesquisa pela faixa de CEPs nos municipios de um Estado.
   * @param clientId Identificaçáo do cliente usado na autenticaçáo.   * @param accessToken Access token usado na autenticaçáo.   * @param estado Abreviaçáo do Estado.   * @param municipio Nome do Município.
  */
  private void getCeps (String clientId, String accessToken, String estado, String municipio, final Response.Listener<List<FaixaCEP>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling getCeps",
        new ApiException(400, "Missing the required parameter 'clientId' when calling getCeps"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling getCeps",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling getCeps"));
    }
    // verify the required parameter 'estado' is set
    if (estado == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'estado' when calling getCeps",
        new ApiException(400, "Missing the required parameter 'estado' when calling getCeps"));
    }

    // create path and map variables
    String path = "/cep/{estado}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "estado" + "\\}", apiInvoker.escapeString(estado.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "municipio", municipio));

    headerParams.put("client_id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access_token", ApiInvoker.parameterToString(accessToken));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<FaixaCEP>) ApiInvoker.deserialize(localVarResponse,  "array", FaixaCEP.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
